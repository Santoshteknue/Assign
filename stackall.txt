/* Simple Stack Program Example Using Pointers in C++*/
/* Data Structure Programs,Stack Programs,C++ Examples */

#include<iostream>
#include<conio.h>
#include<stdlib.h>

#define MAX_SIZE 3

using namespace std;

void push(int i);
void pop(void);

int choice, i;
int *tos, *p1, arr_stack[MAX_SIZE];
int exit_p = 1;

int main() {

    int value;

    tos = arr_stack; /* tos points to the top of stack */
    p1 = arr_stack; /* initialize p1 */
    cout << "\nSimple Stack Example - Pointers";

    do {
        cout << "\nStack Pointer : Main Menu";

        cout << "\n1.Push \t2.Pop \tOthers to exit : Your Choice : ";
        cin>>choice;
        switch (choice) {
            case 1:
                cout << "Enter value: ";
                cin>>value;
                push(value);
                break;
            case 2:
                pop();
                break;
            default:
                exit_p = 0;
                break;
        }
    } while (exit_p);

    return 0;
}

void push(int i) {
    if (p1 == (tos + MAX_SIZE)) {
        cout << "\nStatus : Stack Overflow.\n";
    } else {
        *p1 = i;
        cout << "\nPush Value : %d " << *(p1);
        p1++;
    }
}

void pop(void) {
    if (p1 == tos) {
        cout << "\nStatus : Stack Underflow.";
        //return 0;
    } else {
        p1--;
        cout << "\nPop Value : %d " << *(p1);
    }
}

---------------------------------------------------------------------

////stack using arrray


#include <iostream>
using namespace std;

#define SIZE 5
int A[SIZE];
int top = -1;

bool isempty()
{
  if(top==-1)
  return true;
  else
  return false;
}

void push(int value)
{
  if(top==SIZE-1)
  {    cout<<"Stack is full!\n";
  }
   else
  {
    top++;
    A[top]=value;
  }
}

void pop()
{
 if(isempty())
  cout<<"Stack is empty!\n";
 else
  top--;
}

void show_top()
{
 if(isempty())
  cout<<"Stack is empty!\n";
 else
  cout<<"Element at top is: "<<A[top]<<"\n";

}

void displayStack()
{
  if(isempty())
 {
    cout<<"Stack is empty!\n";
 }
 else
 {
  for(int i=0 ; i<=top; i++)
    cout<<A[i]<<" ";
   cout<<"\n";

  }

}

int main()
{

 int choice, flag=1, value;
 while( flag == 1)
 {
 cout<<"\n1.PUSH 2.POP 3.SHOW_TOP 4.DISPLAY_STACK 5.EXIT\n";
 cin>>choice; switch (choice)
 {
 case 1: cout<<"Enter Value:\n";
         cin>>value;
         push(value);
         break;
 case 2: pop();
         break;
 case 3: show_top();
         break;
 case 4: displayStack();
         break;
 case 5: flag = 0;
         break;
 }
 }
  return 0;
}
------------------------------------------------------------------------
//stsck using linklist


#include <iostream>
using namespace std;

//Structure of the Node
struct Node
{
int data;

Node *link;
};

// top pointer to keep track of the top of the stack
Node *top = NULL;

//Function to check if stack is empty or not
bool isempty()
{
 if(top == NULL)
 return true; else
 return false;
}

//Function to insert an element in stack
void push (int value)
{
  Node *ptr = new Node();
  ptr->data = value;
  ptr->link = top;
  top = ptr;
}

//Function to delete an element from the stack
void pop ( )
{
 if ( isempty() )
  cout<<"Stack is Empty";
 else
 {
  Node *ptr = top;
  top = top -> link;
  delete(ptr);
 }
}

// Function to show the element at the top of the stack
void showTop()
{
 if ( isempty() )
  cout<<"Stack is Empty";
 else
  cout<<"Element at top is : "<< top->data;
}

// Function to Display the stack
void displayStack()
{
 if ( isempty() )
  cout<<"Stack is Empty";
 else
 {
  Node *temp=top;
  while(temp!=NULL)
  {   cout<<temp->data<<" ";
   temp=temp->link;
  }
  cout<<"\n";
 }
 }

// Main function
int main()
{

 int choice, flag=1, value;

 //Menu Driven Program using Switch
 while( flag == 1)
 {
 cout<<"\n1.Push 2.Pop 3.showTop 4.displayStack 5.exit\n";
 cin>>choice;
 switch (choice)
 {
 case 1: cout<<"Enter Value:\n";
         cin>>value;
         push(value);
         break;
 case 2: pop();
         break;
 case 3: showTop();
         break;
 case 4: displayStack();
         break;
 case 5: flag = 0;
         break;
 }
 }

return 0;
}

-----------------------------------------------------------------
* Simple Stack Program Example Using Class in C++*/
/* Data Structure Programs,Stack Programs,C++ Examples */

#include<iostream>

#include<stdio.h>
#include<conio.h>
#include<stdlib.h>

#define MAX_SIZE 5

using namespace std;

class Stack {
private:
    int item, i;
    int arr_stack[MAX_SIZE];
    int top;

public:

    Stack() {
        top = 0;

    }

    void push() {
        if (top == MAX_SIZE)
            cout << "\n## Stack is Full!";
        else {
            cout << "\nEnter The Value to be pushed : ";
            cin>>item;
            cout << "\n## Position : " << top << ", Pushed Value  :" << item;
            arr_stack[top++] = item;
        }
    }

    void pop() {
        if (top == 0)
            cout << "\n## Stack is Empty!";
        else {
            --top;
            cout << "\n## Position : " << top << ", Popped Value  :" << arr_stack[top];
        }
    }

    void display() {
        cout << "\n## Stack Size : " << top;
        for (i = (top - 1); i >= 0; i--)
            cout << "\n## Position : " << i << ", Value  :" << arr_stack[i];
    }
};

int main() {
    int choice, exit_p = 1;
    Stack obj;
    cout << "\nSimple Stack Example - Class and Member Functions - C++";
    do {
        cout << "\n\nStack Main Menu";

        cout << "\n1.Push \n2.Pop \n3.Display \nOthers to exit";
        cout << "\nEnter Your Choice : ";
        cin>>choice;
        switch (choice) {
            case 1:
                obj.push();
                break;
            case 2:
                obj.pop();
                break;
            case 3:
                obj.display();
                break;
            default:
                exit_p = 0;
                break;
        }
    } while (exit_p);

    return 0;
}






